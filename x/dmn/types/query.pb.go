// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cyber/dmn/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct{}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{0}
}

func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}

func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{1}
}

func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}

func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryThoughtParamsRequest struct {
	Program string `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryThoughtParamsRequest) Reset()         { *m = QueryThoughtParamsRequest{} }
func (m *QueryThoughtParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtParamsRequest) ProtoMessage()    {}
func (*QueryThoughtParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{2}
}

func (m *QueryThoughtParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtParamsRequest.Merge(m, src)
}

func (m *QueryThoughtParamsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtParamsRequest proto.InternalMessageInfo

func (m *QueryThoughtParamsRequest) GetProgram() string {
	if m != nil {
		return m.Program
	}
	return ""
}

func (m *QueryThoughtParamsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryThoughtResponse struct {
	Thought Thought `protobuf:"bytes,1,opt,name=thought,proto3" json:"thought"`
}

func (m *QueryThoughtResponse) Reset()         { *m = QueryThoughtResponse{} }
func (m *QueryThoughtResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtResponse) ProtoMessage()    {}
func (*QueryThoughtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{3}
}

func (m *QueryThoughtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtResponse.Merge(m, src)
}

func (m *QueryThoughtResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtResponse proto.InternalMessageInfo

func (m *QueryThoughtResponse) GetThought() Thought {
	if m != nil {
		return m.Thought
	}
	return Thought{}
}

type QueryThoughtStatsResponse struct {
	ThoughtStats ThoughtStats `protobuf:"bytes,1,opt,name=thought_stats,json=thoughtStats,proto3" json:"thought_stats"`
}

func (m *QueryThoughtStatsResponse) Reset()         { *m = QueryThoughtStatsResponse{} }
func (m *QueryThoughtStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtStatsResponse) ProtoMessage()    {}
func (*QueryThoughtStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{4}
}

func (m *QueryThoughtStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtStatsResponse.Merge(m, src)
}

func (m *QueryThoughtStatsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtStatsResponse proto.InternalMessageInfo

func (m *QueryThoughtStatsResponse) GetThoughtStats() ThoughtStats {
	if m != nil {
		return m.ThoughtStats
	}
	return ThoughtStats{}
}

type QueryThoughtsRequest struct{}

func (m *QueryThoughtsRequest) Reset()         { *m = QueryThoughtsRequest{} }
func (m *QueryThoughtsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsRequest) ProtoMessage()    {}
func (*QueryThoughtsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{5}
}

func (m *QueryThoughtsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsRequest.Merge(m, src)
}

func (m *QueryThoughtsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsRequest proto.InternalMessageInfo

type QueryThoughtsResponse struct {
	Thoughts Thoughts `protobuf:"bytes,1,rep,name=thoughts,proto3,castrepeated=Thoughts" json:"thoughts"`
}

func (m *QueryThoughtsResponse) Reset()         { *m = QueryThoughtsResponse{} }
func (m *QueryThoughtsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsResponse) ProtoMessage()    {}
func (*QueryThoughtsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{6}
}

func (m *QueryThoughtsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsResponse.Merge(m, src)
}

func (m *QueryThoughtsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsResponse proto.InternalMessageInfo

func (m *QueryThoughtsResponse) GetThoughts() Thoughts {
	if m != nil {
		return m.Thoughts
	}
	return nil
}

type QueryThoughtsStatsRequest struct{}

func (m *QueryThoughtsStatsRequest) Reset()         { *m = QueryThoughtsStatsRequest{} }
func (m *QueryThoughtsStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsStatsRequest) ProtoMessage()    {}
func (*QueryThoughtsStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{7}
}

func (m *QueryThoughtsStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsStatsRequest.Merge(m, src)
}

func (m *QueryThoughtsStatsRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsStatsRequest proto.InternalMessageInfo

type QueryThoughtsStatsResponse struct {
	ThoughtsStats ThoughtsStats `protobuf:"bytes,1,rep,name=thoughts_stats,json=thoughtsStats,proto3,castrepeated=ThoughtsStats" json:"thoughts_stats"`
}

func (m *QueryThoughtsStatsResponse) Reset()         { *m = QueryThoughtsStatsResponse{} }
func (m *QueryThoughtsStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsStatsResponse) ProtoMessage()    {}
func (*QueryThoughtsStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{8}
}

func (m *QueryThoughtsStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsStatsResponse.Merge(m, src)
}

func (m *QueryThoughtsStatsResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsStatsResponse proto.InternalMessageInfo

func (m *QueryThoughtsStatsResponse) GetThoughtsStats() ThoughtsStats {
	if m != nil {
		return m.ThoughtsStats
	}
	return nil
}

type QueryThoughtsFeesRequest struct{}

func (m *QueryThoughtsFeesRequest) Reset()         { *m = QueryThoughtsFeesRequest{} }
func (m *QueryThoughtsFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsFeesRequest) ProtoMessage()    {}
func (*QueryThoughtsFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{9}
}

func (m *QueryThoughtsFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsFeesRequest.Merge(m, src)
}

func (m *QueryThoughtsFeesRequest) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsFeesRequest proto.InternalMessageInfo

type QueryThoughtsFeesResponse struct {
	Fees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees"`
}

func (m *QueryThoughtsFeesResponse) Reset()         { *m = QueryThoughtsFeesResponse{} }
func (m *QueryThoughtsFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThoughtsFeesResponse) ProtoMessage()    {}
func (*QueryThoughtsFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_55109069a1b1f260, []int{10}
}

func (m *QueryThoughtsFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *QueryThoughtsFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThoughtsFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *QueryThoughtsFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThoughtsFeesResponse.Merge(m, src)
}

func (m *QueryThoughtsFeesResponse) XXX_Size() int {
	return m.Size()
}

func (m *QueryThoughtsFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThoughtsFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThoughtsFeesResponse proto.InternalMessageInfo

func (m *QueryThoughtsFeesResponse) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cyber.dmn.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cyber.dmn.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryThoughtParamsRequest)(nil), "cyber.dmn.v1beta1.QueryThoughtParamsRequest")
	proto.RegisterType((*QueryThoughtResponse)(nil), "cyber.dmn.v1beta1.QueryThoughtResponse")
	proto.RegisterType((*QueryThoughtStatsResponse)(nil), "cyber.dmn.v1beta1.QueryThoughtStatsResponse")
	proto.RegisterType((*QueryThoughtsRequest)(nil), "cyber.dmn.v1beta1.QueryThoughtsRequest")
	proto.RegisterType((*QueryThoughtsResponse)(nil), "cyber.dmn.v1beta1.QueryThoughtsResponse")
	proto.RegisterType((*QueryThoughtsStatsRequest)(nil), "cyber.dmn.v1beta1.QueryThoughtsStatsRequest")
	proto.RegisterType((*QueryThoughtsStatsResponse)(nil), "cyber.dmn.v1beta1.QueryThoughtsStatsResponse")
	proto.RegisterType((*QueryThoughtsFeesRequest)(nil), "cyber.dmn.v1beta1.QueryThoughtsFeesRequest")
	proto.RegisterType((*QueryThoughtsFeesResponse)(nil), "cyber.dmn.v1beta1.QueryThoughtsFeesResponse")
}

func init() { proto.RegisterFile("cyber/dmn/v1beta1/query.proto", fileDescriptor_55109069a1b1f260) }

var fileDescriptor_55109069a1b1f260 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0x26, 0x24, 0x65, 0x69, 0x11, 0x2c, 0x29, 0x4a, 0x0c, 0x75, 0x8a, 0x45, 0x3e,
	0x24, 0x1a, 0x9b, 0x96, 0x03, 0x12, 0xc7, 0x20, 0xf1, 0x75, 0x40, 0x10, 0x38, 0x21, 0xa1, 0xc8,
	0x49, 0x16, 0x27, 0x02, 0x7b, 0x5d, 0xef, 0x06, 0x11, 0x81, 0x38, 0x70, 0x40, 0x1c, 0x91, 0x38,
	0x80, 0xc4, 0x1b, 0xf0, 0x24, 0x3d, 0x56, 0xe2, 0xc2, 0x09, 0x50, 0xc2, 0x99, 0x67, 0x40, 0xde,
	0x9d, 0xb8, 0xd9, 0x26, 0xa9, 0xc3, 0xa9, 0xce, 0xce, 0xcc, 0x7f, 0x7e, 0x33, 0xbb, 0x7f, 0x15,
	0x6d, 0x76, 0x86, 0x6d, 0x12, 0xda, 0x5d, 0xcf, 0xb7, 0x5f, 0xee, 0xb4, 0x09, 0x77, 0x76, 0xec,
	0xbd, 0x01, 0x09, 0x87, 0x56, 0x10, 0x52, 0x4e, 0xf1, 0x59, 0x11, 0xb6, 0xba, 0x9e, 0x6f, 0x41,
	0x58, 0xcf, 0xbb, 0xd4, 0xa5, 0x22, 0x6a, 0x47, 0x5f, 0x32, 0x51, 0xbf, 0xe8, 0x52, 0xea, 0xbe,
	0x20, 0xb6, 0x13, 0xf4, 0x6d, 0xc7, 0xf7, 0x29, 0x77, 0x78, 0x9f, 0xfa, 0x0c, 0xa2, 0x46, 0x87,
	0x32, 0x8f, 0x32, 0xbb, 0xed, 0x30, 0x12, 0xf7, 0xe9, 0xd0, 0xbe, 0x0f, 0xf1, 0x39, 0x14, 0x7c,
	0x18, 0x10, 0x28, 0x37, 0xf3, 0x08, 0x3f, 0x8c, 0xa0, 0x1e, 0x38, 0xa1, 0xe3, 0xb1, 0x26, 0xd9,
	0x1b, 0x10, 0xc6, 0xcd, 0xfb, 0xe8, 0x9c, 0x72, 0xca, 0x02, 0xea, 0x33, 0x82, 0xaf, 0xa3, 0x6c,
	0x20, 0x4e, 0x0a, 0xda, 0x96, 0x56, 0x3b, 0xb5, 0x5b, 0xb4, 0x66, 0x66, 0xb0, 0x64, 0x49, 0x23,
	0xb3, 0xff, 0xb3, 0x94, 0x6a, 0x42, 0xba, 0x79, 0x17, 0x15, 0x85, 0xde, 0xe3, 0x1e, 0x1d, 0xb8,
	0x3d, 0xae, 0x34, 0xc3, 0x05, 0x94, 0x0b, 0x42, 0xea, 0x86, 0x8e, 0x27, 0x64, 0x4f, 0x36, 0x27,
	0x3f, 0x31, 0x46, 0x19, 0xdf, 0xf1, 0x48, 0x61, 0x45, 0x1c, 0x8b, 0x6f, 0xb3, 0x89, 0xf2, 0xd3,
	0x52, 0x31, 0xdb, 0x0d, 0x94, 0xe3, 0xf2, 0x08, 0xe0, 0xf4, 0x39, 0x70, 0x50, 0x04, 0x74, 0x93,
	0x02, 0xd3, 0x55, 0xf1, 0x1e, 0x71, 0x87, 0x1f, 0x0e, 0x7d, 0x0f, 0xad, 0x43, 0x5e, 0x8b, 0x45,
	0x01, 0x90, 0x2f, 0x2d, 0x96, 0x17, 0xf5, 0xd0, 0x63, 0x8d, 0x4f, 0x9d, 0x99, 0xe7, 0x55, 0xf8,
	0x78, 0xdf, 0x0e, 0xda, 0x38, 0x72, 0x0e, 0xcd, 0xef, 0xa0, 0x55, 0x10, 0x88, 0xfa, 0xa6, 0x13,
	0xc6, 0x3a, 0x13, 0xb5, 0xfc, 0xf6, 0xab, 0xb4, 0x1a, 0xeb, 0xc4, 0xd5, 0xe6, 0x05, 0x75, 0x46,
	0x06, 0x43, 0xca, 0xfe, 0xaf, 0x91, 0x3e, 0x2f, 0x08, 0x10, 0x4f, 0xd1, 0xe9, 0x89, 0x4c, 0xbc,
	0x82, 0xf4, 0x32, 0x2b, 0xd8, 0x00, 0x9e, 0x75, 0x55, 0x77, 0xb2, 0x4f, 0xf9, 0xd3, 0xd4, 0x51,
	0x41, 0x69, 0x7e, 0x8b, 0x90, 0x18, 0xec, 0xcd, 0x11, 0x6a, 0x19, 0x03, 0xae, 0x16, 0xca, 0x3c,
	0x23, 0x84, 0x15, 0xd2, 0x82, 0xa6, 0x68, 0x49, 0x27, 0x58, 0x91, 0x13, 0x62, 0x9e, 0x9b, 0xb4,
	0xef, 0x37, 0xae, 0x02, 0x47, 0xcd, 0xed, 0xf3, 0xde, 0xa0, 0x6d, 0x75, 0xa8, 0x67, 0x83, 0x6d,
	0xe4, 0x9f, 0x3a, 0xeb, 0x3e, 0x07, 0x5b, 0x44, 0x05, 0xac, 0x29, 0x84, 0x77, 0xff, 0x66, 0xd1,
	0x09, 0xd1, 0x1e, 0xbf, 0x45, 0x59, 0xf9, 0x68, 0x71, 0x79, 0xce, 0xd0, 0xb3, 0x0e, 0xd2, 0x2b,
	0x49, 0x69, 0x72, 0x06, 0xb3, 0xfc, 0xee, 0xfb, 0x9f, 0x4f, 0x2b, 0x25, 0xbc, 0x69, 0xcf, 0xfa,
	0x34, 0xfa, 0x96, 0x06, 0xc2, 0x1f, 0x34, 0x94, 0x83, 0x1d, 0xe0, 0xed, 0x45, 0xd2, 0xf3, 0xdc,
	0xa5, 0x57, 0x13, 0xb2, 0x63, 0x92, 0x8a, 0x20, 0xd9, 0xc2, 0xc6, 0x02, 0x12, 0xb8, 0x34, 0xfc,
	0x45, 0x43, 0x6b, 0xd3, 0xb7, 0xfc, 0x9f, 0x3c, 0x49, 0xd9, 0xca, 0xd3, 0x33, 0xb7, 0x05, 0x54,
	0x05, 0x5f, 0x3e, 0x1e, 0x4a, 0x3e, 0x4b, 0xfc, 0x5e, 0x43, 0xf1, 0xd3, 0xc7, 0x49, 0x83, 0xc7,
	0x44, 0xb5, 0xe4, 0x44, 0xa0, 0xa9, 0x0a, 0x9a, 0x4b, 0xb8, 0x74, 0x3c, 0x0d, 0xc3, 0x5f, 0x35,
	0xa4, 0xbe, 0xf9, 0xc4, 0x25, 0x29, 0x7e, 0xd4, 0xeb, 0x4b, 0x66, 0x03, 0x57, 0x5d, 0x70, 0x55,
	0x71, 0x39, 0x81, 0x0b, 0xd6, 0xf4, 0xf9, 0xf0, 0x06, 0x85, 0xa1, 0xf0, 0x95, 0xa4, 0x76, 0x53,
	0x96, 0x4c, 0xbc, 0x40, 0xc5, 0xa3, 0xcb, 0x5e, 0x20, 0x6b, 0x45, 0x86, 0x6b, 0xdc, 0xde, 0x1f,
	0x19, 0xda, 0xc1, 0xc8, 0xd0, 0x7e, 0x8f, 0x0c, 0xed, 0xe3, 0xd8, 0x48, 0x1d, 0x8c, 0x8d, 0xd4,
	0x8f, 0xb1, 0x91, 0x7a, 0x52, 0x9f, 0xb6, 0x6e, 0xa4, 0xd4, 0xa1, 0xbe, 0x1b, 0x12, 0xc6, 0x6c,
	0x97, 0xd6, 0xa5, 0xf4, 0x2b, 0x29, 0x18, 0xb9, 0xb8, 0x9d, 0x15, 0xff, 0xdd, 0xae, 0xfd, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x7a, 0x0c, 0x0d, 0x7e, 0x84, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ context.Context
	_ grpc.ClientConn
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Thought(ctx context.Context, in *QueryThoughtParamsRequest, opts ...grpc.CallOption) (*QueryThoughtResponse, error)
	ThoughtStats(ctx context.Context, in *QueryThoughtParamsRequest, opts ...grpc.CallOption) (*QueryThoughtStatsResponse, error)
	Thoughts(ctx context.Context, in *QueryThoughtsRequest, opts ...grpc.CallOption) (*QueryThoughtsResponse, error)
	ThoughtsStats(ctx context.Context, in *QueryThoughtsStatsRequest, opts ...grpc.CallOption) (*QueryThoughtsStatsResponse, error)
	ThoughtsFees(ctx context.Context, in *QueryThoughtsFeesRequest, opts ...grpc.CallOption) (*QueryThoughtsFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Thought(ctx context.Context, in *QueryThoughtParamsRequest, opts ...grpc.CallOption) (*QueryThoughtResponse, error) {
	out := new(QueryThoughtResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/Thought", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ThoughtStats(ctx context.Context, in *QueryThoughtParamsRequest, opts ...grpc.CallOption) (*QueryThoughtStatsResponse, error) {
	out := new(QueryThoughtStatsResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/ThoughtStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Thoughts(ctx context.Context, in *QueryThoughtsRequest, opts ...grpc.CallOption) (*QueryThoughtsResponse, error) {
	out := new(QueryThoughtsResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/Thoughts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ThoughtsStats(ctx context.Context, in *QueryThoughtsStatsRequest, opts ...grpc.CallOption) (*QueryThoughtsStatsResponse, error) {
	out := new(QueryThoughtsStatsResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/ThoughtsStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ThoughtsFees(ctx context.Context, in *QueryThoughtsFeesRequest, opts ...grpc.CallOption) (*QueryThoughtsFeesResponse, error) {
	out := new(QueryThoughtsFeesResponse)
	err := c.cc.Invoke(ctx, "/cyber.dmn.v1beta1.Query/ThoughtsFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Thought(context.Context, *QueryThoughtParamsRequest) (*QueryThoughtResponse, error)
	ThoughtStats(context.Context, *QueryThoughtParamsRequest) (*QueryThoughtStatsResponse, error)
	Thoughts(context.Context, *QueryThoughtsRequest) (*QueryThoughtsResponse, error)
	ThoughtsStats(context.Context, *QueryThoughtsStatsRequest) (*QueryThoughtsStatsResponse, error)
	ThoughtsFees(context.Context, *QueryThoughtsFeesRequest) (*QueryThoughtsFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct{}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func (*UnimplementedQueryServer) Thought(ctx context.Context, req *QueryThoughtParamsRequest) (*QueryThoughtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thought not implemented")
}

func (*UnimplementedQueryServer) ThoughtStats(ctx context.Context, req *QueryThoughtParamsRequest) (*QueryThoughtStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThoughtStats not implemented")
}

func (*UnimplementedQueryServer) Thoughts(ctx context.Context, req *QueryThoughtsRequest) (*QueryThoughtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thoughts not implemented")
}

func (*UnimplementedQueryServer) ThoughtsStats(ctx context.Context, req *QueryThoughtsStatsRequest) (*QueryThoughtsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThoughtsStats not implemented")
}

func (*UnimplementedQueryServer) ThoughtsFees(ctx context.Context, req *QueryThoughtsFeesRequest) (*QueryThoughtsFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThoughtsFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Thought_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThoughtParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Thought(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/Thought",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Thought(ctx, req.(*QueryThoughtParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ThoughtStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThoughtParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ThoughtStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/ThoughtStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ThoughtStats(ctx, req.(*QueryThoughtParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Thoughts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThoughtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Thoughts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/Thoughts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Thoughts(ctx, req.(*QueryThoughtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ThoughtsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThoughtsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ThoughtsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/ThoughtsStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ThoughtsStats(ctx, req.(*QueryThoughtsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ThoughtsFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThoughtsFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ThoughtsFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cyber.dmn.v1beta1.Query/ThoughtsFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ThoughtsFees(ctx, req.(*QueryThoughtsFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cyber.dmn.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Thought",
			Handler:    _Query_Thought_Handler,
		},
		{
			MethodName: "ThoughtStats",
			Handler:    _Query_ThoughtStats_Handler,
		},
		{
			MethodName: "Thoughts",
			Handler:    _Query_Thoughts_Handler,
		},
		{
			MethodName: "ThoughtsStats",
			Handler:    _Query_ThoughtsStats_Handler,
		},
		{
			MethodName: "ThoughtsFees",
			Handler:    _Query_ThoughtsFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyber/dmn/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryThoughtParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Program) > 0 {
		i -= len(m.Program)
		copy(dAtA[i:], m.Program)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Program)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryThoughtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Thought.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryThoughtStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ThoughtStats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Thoughts) > 0 {
		for iNdEx := len(m.Thoughts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Thoughts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThoughtsStats) > 0 {
		for iNdEx := len(m.ThoughtsStats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThoughtsStats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThoughtsFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThoughtsFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThoughtsFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryThoughtParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Program)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryThoughtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Thought.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryThoughtStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ThoughtStats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryThoughtsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThoughtsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Thoughts) > 0 {
		for _, e := range m.Thoughts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryThoughtsStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThoughtsStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ThoughtsStats) > 0 {
		for _, e := range m.ThoughtsStats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryThoughtsFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThoughtsFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thought", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Thought.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThoughtStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThoughtStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thoughts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thoughts = append(m.Thoughts, Thought{})
			if err := m.Thoughts[len(m.Thoughts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThoughtsStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThoughtsStats = append(m.ThoughtsStats, ThoughtStats{})
			if err := m.ThoughtsStats[len(m.ThoughtsStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *QueryThoughtsFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThoughtsFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThoughtsFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
