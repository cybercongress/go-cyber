syntax = "proto3";
package cyber.bandwidth.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cyber/bandwidth/v1beta1/types.proto";

option go_package = "github.com/cybercongress/go-cyber/x/bandwidth/types";

service Query {
  rpc Load(QueryLoadRequest) returns (QueryLoadResponse) {
    option (google.api.http).get = "/cyber/bandwidth/v1beta1/bandwidth/load";
  }

  rpc Price(QueryPriceRequest) returns (QueryPriceResponse) {
    option (google.api.http).get = "/cyber/bandwidth/v1beta1/bandwidth/price";
  }

  rpc TotalBandwidth(QueryTotalBandwidthRequest)
      returns (QueryTotalBandwidthResponse) {
    option (google.api.http).get = "/cyber/bandwidth/v1beta1/bandwidth/total";
  }

  rpc NeuronBandwidth(QueryNeuronBandwidthRequest)
      returns (QueryNeuronBandwidthResponse) {
    option (google.api.http).get =
        "/cyber/bandwidth/v1beta1/bandwidth/neuron/{neuron}";
  }

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cyber/bandwidth/v1beta1/bandwidth/params";
  }
}

message QueryLoadRequest {}

message QueryLoadResponse {
  string load = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message QueryPriceRequest {}

message QueryPriceResponse {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message QueryTotalBandwidthRequest {}

message QueryTotalBandwidthResponse { uint64 total_bandwidth = 1; }

message QueryNeuronBandwidthRequest { string neuron = 1; }

message QueryNeuronBandwidthResponse {
  NeuronBandwidth neuron_bandwidth = 1 [ (gogoproto.nullable) = false ];
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}